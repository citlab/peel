app {
    # default bundle paths
    path {
        home = ${user.dir}
        apps = ${app.path.home}"/apps"
        datagens = ${app.path.home}"/datagens"
        datasets = ${app.path.home}"/datasets"
        downloads = ${app.path.home}"/downloads"
        results = ${app.path.home}"/results"
        systems = ${app.path.home}"/systems"
        utils = ${app.path.home}"/utils"
    }
    # database connections
    db {
        # a db connection to an H2 database
        h2 {
            user = null
            password = null
            name = peel
            url = "jdbc:h2:"${app.path.results}"/"${app.db.monetdb.name}
        }
        # a db connection to a MonetDB database
        monetdb {
            user = monetdb
            password = monetdb
            name = peel
            url = "jdbc:monetdb://localhost/"${app.db.monetdb.name}
        }
        # a db connection to a PostgreSQL database
        postgresql {
            user = ${user.name}
            password = ""
            name = peel
            schema = public
            url = "jdbc:postgresql://localhost/"${app.db.postgresql.name}
        }
    }
    # rsync remotes
    rsync {
        # example remote 'host-X'
        host-X {
            url = "host-X.acme.com" # emote host url
            rsh = "ssh -l peel" # remote shell to use
            dst = "/home/peel/experiments" # remote destination base folder
            own = "peel:benchmarking" # remote files owner (optional)
        }
    }
}

system {
    default {
        user = ${user.name}
        group = ${user.name}
        config {
            masters = [ ${app.hostname} ]
            slaves = [ ${app.hostname} ]
            java = {
                home = ${java.home}
            }
            parallelism.per-node = ${runtime.cpu.cores}
            parallelism.total = ${system.default.config.parallelism.per-node}
        }
        path {
            isShared = "false"
        }
        # system startup options
        startup {
            max.attempts = 3
            polling {
                counter = 10
                interval = 6000
            }
        }
        # system teardown options
        stop {
            max.attempts = 3
            polling.interval = 6000
        }
    }
}

experiment {
    timeout = 7200
    run.intermission = 3000
}

akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "INFO"

    actor.deployment {
        /extractor/processor {
            router = smallest-mailbox-pool
            nr-of-instances = ${runtime.cpu.cores}
        }
    }
}